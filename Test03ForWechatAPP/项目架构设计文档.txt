【项目技术架构设计文档】

一、项目整体结构
本项目分为三大部分：
1. 仓储小程序前端（微信小程序原生框架，用户操作界面）
2. 仓储小程序仓储管理系统（Node.js+Express，一体化方案，数据处理与存储，含API服务）
3. 管理后台（Vue.js+Element UI，管理员操作界面）

二、开发环境与部署架构
1. 开发环境配置设计：
- 支持本地开发、测试、生产等多环境，配置文件分离，API地址、数据库、日志等参数可按环境切换。
- 小程序前端通过project.config.json区分环境，API基地址在utils/config.js维护。
- 管理后台通过.env.development、.env.test、.env.production等文件配置API基地址。
- Node.js后端通过config/config.dev.js、config.test.js、config.prod.js等文件配置，启动时通过NODE_ENV切换。

2. 模块部署架构：
- 仓储小程序前端：
  - 开发环境：微信开发者工具（Windows/macOS）、Node.js、npm
  - 部署：微信小程序平台，用户扫码或搜索访问。
- 仓储管理系统（API服务）：
  - 开发环境：Node.js（LTS）、npm、VS Code/IDEA、Postman
  - 部署：云服务器/内网服务器，推荐Docker容器化，HTTPS加密，RESTful API服务。
- 管理后台：
  - 开发环境：Node.js、npm、Vue CLI、VS Code/IDEA、Chrome
  - 部署：Web应用，云服务器/内网服务器，Nginx反向代理。
- 数据库：
  - 开发环境：MySQL Workbench、Navicat、DBeaver
  - 部署：MySQL独立部署，仅API服务可访问。
- 日志与备份：所有服务日志统一存储，定期备份数据库和日志文件，支持快速恢复。

三、技术选型
1. 仓储小程序前端
- 开发框架：微信小程序原生框架
- 语言：JavaScript
- 状态管理：微信小程序内置storage
- 请求库：微信小程序内置request
- UI设计：微信官方组件库
- 工具：微信开发者工具

2. 仓储管理系统（API服务）
- 开发框架：Node.js + Express
- 语言：JavaScript
- 数据库：MySQL
- 权限认证：Session + Cookie
- 视图模板引擎：EJS
- UI组件库：Vue.js + Element UI（管理后台）
- 状态管理：Vuex（管理后台）
- 构建工具：Webpack

3. 管理后台
- 前端UI：Vue.js + Element UI
- 语言：JavaScript
- 状态管理：Vuex
- 构建工具：Webpack
- 视图模板引擎：EJS

四、开发代码规范
- 命名规范：变量、函数、类名采用小驼峰或大驼峰命名法，数据库表和字段名统一使用小写字母。
- 代码风格：统一使用Prettier/ESLint自动格式化，保持缩进、空格、注释规范。
- 目录结构：前后端、管理后台均按模块分层，目录清晰，便于维护。
- 接口规范：API接口命名首字母大写，不包含下划线和短横线，参数和返回值采用标准JSON格式。
- 文档规范：所有模块需配备README和接口文档，关键业务流程需有注释说明。

五、版本控制与项目管理
- 版本控制：全项目采用Git进行版本管理，主分支（main/master）仅用于稳定发布，开发分支（dev/feature/bugfix）用于日常开发和测试。
- 提交规范：每次提交需写明变更内容，建议采用“feat/fix/docs/style/refactor/test/chore”前缀。
- 代码评审：重要功能需Pull Request并经团队成员评审后合并。
- 项目管理：推荐使用GitHub/GitLab/企业微信等工具进行任务分配、进度跟踪和问题管理。
- 发布流程：开发完成后先在测试环境部署，测试通过后再发布到生产环境。

六、数据存储设计
本项目所有数据统一存储在MySQL数据库中，主要表结构如下：

1. 操作员表（operator）
- 字段：操作员ID、姓名、操作员代码、联系方式、角色、密码等
- 说明：记录所有操作员信息，用于登录和权限管理

2. 仓库表（warehouse）
- 字段：仓库ID、仓库名称、创建时间、负责人、创建人ID等
- 说明：记录所有仓库的基本信息

3. 供应商表（supplier）
- 字段：供应商ID、名称、联系人、联系方式等
- 说明：记录所有供应商信息

4. 库存表（inventory）
- 字段：库存ID、仓库ID、商品ID、数量、单价、总价值等
- 说明：记录每个仓库每种商品的库存情况

5. 入库单表（inbound）
- 字段：入库单ID、仓库ID、商品ID、数量、单价、操作员ID、入库时间、供应商等
- 说明：记录所有入库操作明细

6. 出库单表（outbound）
- 字段：出库单ID、仓库ID、商品ID、数量、单价、操作员ID、出库时间、用途等
- 说明：记录所有出库操作明细

7. 商品流水表（product_flow）
- 字段：流水ID、商品ID、商品编号、名称、类别、单位、规格、状态、类型（入库/出库）、单据ID、仓库ID、数量、单价、总价值、操作员ID、时间等
- 说明：合并商品信息与所有入库、出库的流水明细，支持商品追溯、筛选和统计

8. 操作日志表（log）
- 字段：日志ID、操作员ID、操作类型、内容、时间、IP等
- 说明：记录所有关键操作，便于安全审计

表与表之间通过ID建立关联，保证数据一致性和可追溯性。所有数据操作均有日志记录，支持数据备份与恢复。

七、各部分说明
1. 仓储小程序前端
- 主要功能：扫码入库、扫码出库、仓库管理、订单查询、流水记录、个人信息等。
- 用户通过微信小程序界面进行操作，所有数据都通过安全的API接口与后端交互。
- 前端不存储敏感数据，所有重要操作都需要登录。

2. 仓储管理系统（API服务）
- 主要功能：接收前端请求，处理业务逻辑，操作数据库，返回数据。
- 采用Node.js + Express开发，数据库为MySQL。
- 所有接口均需身份验证，防止未授权访问。
- 记录所有操作日志，便于追溯。

3. 管理后台
- 主要功能：管理员登录、仓库和商品管理、订单和流水管理、系统设置等。
- 管理员通过网页端操作，权限分级，重要操作需二次确认。

八、安全性设计
- 登录和操作均需身份验证，防止未授权访问。
- 所有数据传输均采用HTTPS加密，防止数据被窃取。
- 防止常见攻击：
  1. 防止SQL注入：所有数据库操作均使用参数化查询。
  2. 防止XSS攻击：前端对用户输入做校验和转义，后端输出数据也做安全处理。
  3. 防止CSRF攻击：所有敏感操作需校验用户身份，管理后台采用Session+Token机制。
  4. 防止暴力破解：登录接口有频率限制，连续失败会锁定账号。
- 重要操作（如删除、作废、审核）均有二次确认，防止误操作。
- 日志记录所有关键操作，便于安全审计。

九、简明流程说明
- 用户通过微信小程序扫码登录，进入首页。
- 可查看仓库、进行入库/出库、查询订单和流水。
- 所有操作都通过API与后端交互，数据实时同步。
- 管理员通过管理后台进行高级管理和维护。

十、架构图（文字描述）
【用户微信小程序】←→【仓储管理系统API服务】←→【数据库】←→【管理后台】

十一、常见问题防护
- 未登录无法操作数据。
- 所有页面均有返回和确认，防止误操作。
- 重要数据有备份，支持恢复。

如需详细功能和页面，请参考UI示意图和需求文档。 